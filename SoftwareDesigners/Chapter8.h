#pragma once
#include "Algorithm.h"

/* 第8章 算法设计与分析
	约10分，占比13%

	8.1 算法设计与分析的基本概念
		8.1.1 算法
		8.1.2 算法设计
		8.1.3 算法分析
		8.1.4 算法的表示
	8.2 算法分析基础
		8.2.1 时间复杂度
		8.2.2 渐进符号
		8.2.3 递归式
	8.3 分治法
		8.3.1 递归的概念
		8.3.2 分治法的基本思想
		8.3.3 分治法的典型实例
	8.4 动态规划法
		8.4.1 动态规划法的基本思想
		8.4.2 动态规划法的典型实例
	8.5 贪心法
		8.5.1 贪心法的基本思想
		8.5.2 贪心法的典型实例
	8.6 回溯法
		8.6.1 回溯法的算法框架
		8.6.2 回溯法的典型实例
	8.7 分支限界法
	8.8 概率算法
	8.9 近似算法
	8.10 数据挖掘算法
	8.11 智能优化算法
*/
class Chapter8
{
public:
	Chapter8();

	/* 动态规划算法（Dynamic Programming Algorithm）
	* 动态规划算法的核心就是提供了一个memory来缓存重复子问题的结果，避免了大量的重复计算。
	* 动态规划算法的难点在于怎么将问题转化为能够利用动态规划算法来解决。
	* 举例：Fibonacci、背包问题
	*
	* 1）问题的阶段
	* 2）每个阶段的状态
	* 3）从前一个阶段转化到后一个阶段之间的递推关系
	*/

	/* 分治算法（Divide and Conquer）
	* 把一个大的问题分为若干个子问题，然后在子问题继续向下分，分治算法是递归的典型应用。
	* 举例：排序算法(快速排序，归并排序)，傅立叶变换(快速傅立叶变换)
	*
	* 1）分解，将要解决的问题划分成若干规模较小的同类问题；
	* 2）求解，当子问题划分得足够小时，用较简单的方法解决；
	* 3）合并，按原问题的要求，将子问题的解逐层合并构成原问题的解。
	*/

	/* 回溯算法（backtracking algorithm）
	* 回溯算法是深度优先策略的典型应用，递归遍历。
	* 举例：八皇后问题、迷宫问题
	*
	* 1、针对所给问题，定义问题的解空间，它至少包含问题的一个（最优）解。
	* 2、确定易于搜索的解空间结构,使得能用回溯法方便地搜索整个解空间 。
	* 3、以深度优先的方式搜索解空间，并且在搜索过程中用剪枝函数避免无效搜索。
	*/

	/* 贪心算法（greedy algorithm）
	* 获取到问题的局部最优解，不一定能获取到全局最优解，不同的贪婪策略会导致得到差异非常大的结果。
	* 举例：最小生成树的Prim算法和Kruskal算法都是漂亮的贪心算法。
	*
	* 1、建立数学模型来描述问题；
	* 2、把求解的问题分成若干个子问题；
	* 3、对每一子问题求解，得到子问题的局部最优解；
	* 4、把子问题的解局部最优解合成原来解问题的一个解。
	*/

	/* 分支限界算法（Branch and Bound Method）
	* 运用这种算法的技巧性很强，不同类型的问题解法也各不相同。
	* 基本思想是对有约束条件的最优化问题的所有可行解（数目有限）空间进行搜索。
	*/
};

